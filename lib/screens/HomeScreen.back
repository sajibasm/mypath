import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:geolocator/geolocator.dart';
import 'package:hive/hive.dart';

import '../models/session_summary.dart';
import '../services/DevModeEnvironment.dart';
import '../services/SensorDataService.dart';
import '../services/StorageService.dart';
import '../services/APIService.dart';
import '../widgets/NavigationWidgets.dart';
import '../widgets/DataSummary.dart';
import '../constants/colors.dart';
import '../constants/styles.dart';
import '../constants/constants.dart';
import '../models/sensor_data.dart';
import '../widgets/SensorOverlayPanel.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  GoogleMapController? _mapController; // ✅ 1. Null safety
  late final SensorDataService _sensorService = DevModeEnvironment.getSensorService();
  late final dynamic _locationService = DevModeEnvironment.getLocationService();

  int _selectedIndex = 0;
  bool _isMapReady = false;
  bool _isCollecting = false;

  final List<LatLng> _routePoints = [];
  final Set<Polyline> _polylines = {};
  Set<Marker> _markers = {
    const Marker(
      markerId: MarkerId("current_location"),
      position: LatLng(0.0, 0.0),
    ),
  };

  SensorData? _latestSensorData;
  double _totalDistance = 0.0;
  DateTime? _startTime;
  double _latestSpeed = 0.0;

  StreamSubscription<dynamic>? _locationSub;
  Map<String, dynamic>? _selectedWheelchair;

  String? userName;
  String? userEmail;

  String? _currentSessionId;


  @override
  void initState() {
    super.initState();
    _loadUserInfoAndSession();
    String? _currentSessionId;
  }

  @override
  void dispose() {
    _locationSub?.cancel();
    _sensorService.stop();
    super.dispose();
  }

  Future<void> _loadUserInfoAndSession() async {
    final user = await StorageService.loadUserInfo();
    final savedRoute = await StorageService.getSavedRoute();

    setState(() {
      userName = user['name'] ?? 'Guest';
      userEmail = user['email'] ?? '';
    });

    // ✅ Show resume prompt only if tracking session exists
    if (savedRoute['isCollecting'] == true && savedRoute['route'] != null) {
      final shouldResume = await _showResumeDialog();
      if (!shouldResume) {
        await StorageService.clearRouteSession();
        return;
      }

      final List<dynamic> savedPoints = savedRoute['route'];
      final restoredPoints = savedPoints.map<LatLng>((e) => LatLng(e[0], e[1])).toList();
      final restoredStartTime = DateTime.tryParse(savedRoute['startTime'] ?? '');
      final restoredDistance = (savedRoute['totalDistance'] ?? 0.0).toDouble();

      setState(() {
        _routePoints.addAll(restoredPoints);
        _startTime = restoredStartTime;
        _totalDistance = restoredDistance;
        _isCollecting = true;
      });

      _restoreTrackingUI();
      _startDataCollection(); // ✅ continue tracking
    }
  }

  void _updatePolylinesAndMarkers(LatLng point) {
    _polylines.clear();
    _polylines.add(Polyline(
      polylineId: const PolylineId("live_route"),
      points: _routePoints,
      color: AppColors.primary,
      width: 5,
    ));

    _markers.removeWhere((m) =>
    m.markerId.value == "current_location" ||
        m.markerId.value == "start_point" ||
        m.markerId.value == "end_point");

    _markers.add(Marker(
      markerId: const MarkerId("current_location"),
      position: point,
      icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueAzure),
    ));

    if (_routePoints.length >= 2) {
      _markers.add(Marker(
        markerId: const MarkerId("start_point"),
        position: _routePoints.first,
        icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueGreen),
      ));
      _markers.add(Marker(
        markerId: const MarkerId("end_point"),
        position: _routePoints.last,
        icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
      ));
    }
  }

  String _formatDuration(Duration d) {
    final h = d.inHours.toString().padLeft(2, '0');
    final m = d.inMinutes.remainder(60).toString().padLeft(2, '0');
    final s = d.inSeconds.remainder(60).toString().padLeft(2, '0');
    return "$h:$m:$s";
  }

  void _onNavTap(int index) {
    if (_selectedIndex == 0 && index != 0 && _isCollecting) {
      _stopDataCollection();
    }
    setState(() {
      _selectedIndex = index;
    });
  }

  Future<bool> _showResumeDialog() async {
    return await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return AlertDialog(
          title: const Text('Resume Tracking?'),
          content: const Text('You have an unfinished tracking session. Would you like to resume it?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('Discard'),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              style: ElevatedButton.styleFrom(backgroundColor: AppColors.primary),
              child: const Text('Resume'),
            ),
          ],
        );
      },
    ) ?? false;
  }

  Future<void> _showWheelchairSelectionDialog() async {
    try {
      final wheelchairs = await APIService.getUserWheelchairs();
      if (!mounted) return;

      String? selectedId = wheelchairs
          .firstWhere((w) => w['is_default'] == true, orElse: () => wheelchairs.first)['id']
          .toString();

      await showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) {
          return AlertDialog(
            title: const Text('Select Your Wheelchair'),
            content: StatefulBuilder(
              builder: (context, setDialogState) {
                return SizedBox(
                  width: 300,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      DropdownButtonFormField<String>(
                        value: selectedId,
                        items: wheelchairs.map<DropdownMenuItem<String>>((w) {
                          return DropdownMenuItem<String>(
                            value: w['id'].toString(),
                            child: Row(
                              children: [
                                const Icon(Icons.accessible_forward, color: AppColors.primary),
                                const SizedBox(width: 8),
                                Text(w['identifier']),
                              ],
                            ),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setDialogState(() {
                            selectedId = value!;
                          });
                        },
                        decoration: const InputDecoration(
                          labelText: 'Wheelchair Identifier',
                          border: OutlineInputBorder(),
                        ),
                      ),
                    ],
                  ),
                );
              },
            ),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: const Text('Cancel'),
              ),
              ElevatedButton(
                onPressed: () async {
                  Navigator.of(context).pop(); // ✅ Close the dialog FIRST

                  _selectedWheelchair = wheelchairs.firstWhere((w) => w['id'].toString() == selectedId);
                  await StorageService.saveSelectedWheelchair(_selectedWheelchair!);

                  setState(() => _isCollecting = true);
                  _startDataCollection();
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppColors.primary,
                  padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 24),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                ),
                child: Text('Start Tracking', style: AppTextStyles.primaryButton),
              )

            ],
          );
        },
      );
    } catch (_) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Session expired. Please login again."), backgroundColor: Colors.redAccent),
      );
      await Future.delayed(const Duration(seconds: 2));
      Navigator.pushNamedAndRemoveUntil(context, '/', (route) => false);
    }
  }

  Future<void> _startDataCollection() async {
    // ✅ Cancel any previous stream
    _locationSub?.cancel();

    final currentLoc = await _locationService.getCurrentLocation();
    final currentLatLng = LatLng(currentLoc.latitude!, currentLoc.longitude!);
    final point = LatLng(currentLoc.latitude!, currentLoc.longitude!);

    if (_isMapReady && _mapController != null) {
      _mapController!.animateCamera(
        CameraUpdate.newCameraPosition(
          CameraPosition(target: currentLatLng, zoom: 18.5),
        ),
      );
    }

    _currentSessionId = DateTime.now().toIso8601String();
    _startTime = DateTime.now();
    _totalDistance = 0.0;
    _latestSpeed = 0.0;

    _routePoints.clear();
    _routePoints.add(point); // ✅ Initial point added
    _updatePolylinesAndMarkers(point); // ✅ Initial marker/polyline update

    // ✅ Start listening to location stream
    _locationSub = _locationService.locationStream.listen((loc) async {
      
      print("Live Location: ${loc.latitude}, ${loc.longitude}, Speed: ${loc.speed}");
      
      final point = LatLng(loc.latitude!, loc.longitude!);
      final speed = loc.speed ?? 0;

      if (_routePoints.isEmpty ||
          point.latitude != _routePoints.last.latitude ||
          point.longitude != _routePoints.last.longitude) {

        setState(() {
          _routePoints.add(point);
          _latestSpeed = speed;

          if (_routePoints.length > 1) {
            final last = _routePoints[_routePoints.length - 2];
            _totalDistance += Geolocator.distanceBetween(
              last.latitude, last.longitude,
              point.latitude, point.longitude,
            );
          }

          _updatePolylinesAndMarkers(point);

          if (_isMapReady && _mapController != null) {
            final zoom = speed < 1.0 ? 19.0 : (speed < 3.0 ? 18.5 : 17.5);
            _mapController!.animateCamera(CameraUpdate.newLatLngZoom(point, zoom));
          }

          StorageService.saveRouteSession({
            'isCollecting': true,
            'route': _routePoints.map((p) => [p.latitude, p.longitude]).toList(),
            'startTime': _startTime?.toIso8601String(),
            'totalDistance': _totalDistance,
          });
        });
      }
    });


    // ✅ Sensor data collection handler
    _sensorService.onData = (data) async {
      final dataWithSession = SensorData(
        timestamp: data.timestamp,
        latitude: data.latitude,
        longitude: data.longitude,
        accX: data.accX,
        accY: data.accY,
        accZ: data.accZ,
        gyroX: data.gyroX,
        gyroY: data.gyroY,
        gyroZ: data.gyroZ,
        magX: data.magX,
        magY: data.magY,
        magZ: data.magZ,
        pressure: data.pressure,
        sessionId: _currentSessionId!,
      );

      final box = Hive.box<SensorData>('sensor_data');
      await box.add(dataWithSession);

      print("✅ Sensor data added to Hive");
      print("🕒 Timestamp: ${dataWithSession.timestamp}");
      print("📍 Location: ${dataWithSession.latitude}, ${dataWithSession.longitude}");
      print("📈 ACC: X=${dataWithSession.accX}, Y=${dataWithSession.accY}, Z=${dataWithSession.accZ}");
      print("📉 GYRO: X=${dataWithSession.gyroX}, Y=${dataWithSession.gyroY}, Z=${dataWithSession.gyroZ}");
      print("🧲 MAG: X=${dataWithSession.magX}, Y=${dataWithSession.magY}, Z=${dataWithSession.magZ}");
      if (dataWithSession.pressure != null) {
        print("🌡 PRESSURE: ${dataWithSession.pressure!.toStringAsFixed(2)} hPa");
      }
      print("🔗 Session ID: ${dataWithSession.sessionId}");

      setState(() => _latestSensorData = dataWithSession);
    };

    // ✅ Start sensor collection
    if (_selectedWheelchair != null && _selectedWheelchair!['id'] != null) {
      await _sensorService.start(
        wheelchairId: int.parse(_selectedWheelchair!['id'].toString()),
      );
    }

    setState(() => _isCollecting = true);
  }


  void _restoreTrackingUI() {
    if (_routePoints.isNotEmpty) {
      _updatePolylinesAndMarkers(_routePoints.last);

      if (_isMapReady && _mapController != null) {
        _mapController!.animateCamera(
          CameraUpdate.newCameraPosition(
            CameraPosition(target: _routePoints.last, zoom: 18.5),
          ),
        );
      }
    }
  }

  void _stopDataCollection() async {
    _locationSub?.cancel();
    _sensorService.stop();
    _locationService.stop();

    if (_currentSessionId == null) return;

    final sensorBox = Hive.box<SensorData>('sensor_data');
    final sessionPoints = sensorBox.values
        .where((e) => e.sessionId == _currentSessionId)
        .toList();

    if (sessionPoints.isEmpty) return;

    final sessionBox = Hive.box<SessionSummary>('session_summary');

    final wheelchairId = int.parse(_selectedWheelchair!['id'].toString());

    // Save basic session locally
    final sessionSummary = SessionSummary(
      id: _currentSessionId!,
      startTime: sessionPoints.first.timestamp,
      pointCount: sessionPoints.length,
      wheelchairId: wheelchairId,
      isPendingUpload: true,
      isPartialUpload: false,
    );

    await sessionBox.put(_currentSessionId!, sessionSummary);

    // Try creating session on server
    final serverSessionId = await APIService.createSensorSession(
      wheelchairId: int.parse(_selectedWheelchair!['id'].toString()),
      start: sessionPoints.first.timestamp,
      end: sessionPoints.last.timestamp,
    );

    if (serverSessionId != null) {
      sessionSummary.serverSessionId = serverSessionId;
      sessionSummary.isPendingUpload = true;
      await sessionSummary.save();
      print("✅ Server session ID saved: $serverSessionId");
    } else {
      print("❌ Server unavailable — session saved for retry.");
      // Keep isPendingUpload = true, serverSessionId = null
    }

    _currentSessionId = null;
    await StorageService.clearRouteSession();
    setState(() {
      _isCollecting = false;
      _routePoints.clear();
      _polylines.clear();
      _markers.clear();
      _latestSensorData = null;
    });

// ✅ Reset camera to default view
    if (_mapController != null && _isMapReady) {
      _mapController!.animateCamera(
        CameraUpdate.newCameraPosition(
          CameraPosition(
            target: AppConstants.homeLatLng,
            zoom: AppConstants.defaultZoomHome,
          ),
        ),
      );
    }

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text("Tracking has been stopped"),
        backgroundColor: Colors.black87,
        duration: Duration(seconds: 2),
      ),
    );
  }




  String _getInitials(String? name) {
    if (name == null || name.trim().isEmpty) return 'U';
    final parts = name.trim().split(' ');
    return (parts.length == 1 ? parts[0][0] : parts[0][0] + parts[1][0]).toUpperCase();
  }

  Widget _buildBody() {
    switch (_selectedIndex) {
      case 0:
        return Stack(
          children: [
            GoogleMap(
              initialCameraPosition: CameraPosition(
                target: AppConstants.homeLatLng,
                zoom: AppConstants.defaultZoomHome,
              ),
              onMapCreated: (controller) {
                _mapController = controller;
                setState(() => _isMapReady = true);
              },
              myLocationEnabled: true,
              myLocationButtonEnabled: true,
              polylines: _polylines,
              markers: _markers,
            ),
            if (_isCollecting && _latestSensorData != null)
              Positioned(
                top: 10,
                right: 10,
                left: 10,
                child: SensorOverlayPanel(
                  sensorData: _latestSensorData!,
                  speed: _latestSpeed,
                  totalDistance: _totalDistance,
                  startTime: _startTime,
                  formatDuration: _formatDuration,
                ),
              ),
            Positioned(
              bottom: 5,
              left: 0,
              right: 0,
              child: Center(
                child: FractionallySizedBox(
                  widthFactor: 0.9,
                  child: Container(
                    padding: const EdgeInsets.all(AppConstants.mapPadding),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.9),
                      borderRadius: BorderRadius.circular(16),
                      boxShadow: const [BoxShadow(color: Colors.black26, blurRadius: 7)],
                    ),
                    child: ElevatedButton(
                      onPressed: () {
                        if (_isCollecting) {
                          _stopDataCollection();
                        } else {
                          _showWheelchairSelectionDialog();
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: _isCollecting ? Colors.red : AppColors.primary,
                        padding: const EdgeInsets.symmetric(vertical: 14),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                      ),
                      child: Text(
                        _isCollecting ? 'Stop Data Collection' : 'Start Data Collection',
                        style: AppTextStyles.primaryButton,
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ],
        );
      case 1:
        return const DataSummaryWidget();
      case 2:
        return TurnByTurnMapWidget();
      default:
        return const Center(child: Text("Invalid tab"));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('MyPath'),
        backgroundColor: AppColors.primary,
        leading: Builder(
          builder: (context) => IconButton(
            icon: const Icon(Icons.menu),
            onPressed: () => Scaffold.of(context).openDrawer(),
          ),
        ),
      ),
      drawer: Drawer(
        child: Column(
          children: [
            UserAccountsDrawerHeader(
              accountName: Text(userName ?? ''),
              accountEmail: Text(userEmail ?? ''),
              currentAccountPicture: CircleAvatar(
                backgroundColor: Colors.white,
                child: Text(_getInitials(userName), style: const TextStyle(fontSize: 24.0, color: Colors.green)),
              ),
              decoration: const BoxDecoration(color: AppColors.primary),
            ),
            ListTile(
              leading: const Icon(Icons.person),
              title: const Text("Profile"),
              onTap: () {
                Navigator.pop(context);
                Navigator.pushNamed(context, '/profile');
              },
            ),
            ListTile(
              leading: const Icon(Icons.accessible_forward),
              title: const Text("WheelChair"),
              onTap: () {
                Navigator.pop(context);
                Navigator.pushNamed(context, '/wheelchair');
              },
            ),
            ListTile(
              leading: const Icon(Icons.settings),
              title: const Text("Settings"),
              onTap: () {
                Navigator.pop(context);
                Navigator.pushNamed(context, '/settings');
              },
            ),
            // ✅ NEW: Data Log menu
            ListTile(
              leading: const Icon(Icons.storage),
              title: const Text("Data Log"),
              onTap: () {
                Navigator.pop(context);
                Navigator.pushNamed(context, '/data-log');
              },
            ),
            ListTile(
              leading: const Icon(Icons.home),
              title: const Text("Home"),
              onTap: () {
                Navigator.pop(context);
                Navigator.pushNamed(context, '/home');
              },
            ),
            const Divider(),
            ListTile(
              leading: const Icon(Icons.logout),
              title: const Text("Sign Out"),
              onTap: () async {
                Navigator.pop(context);
                await StorageService.clearAll();
                Navigator.pushNamedAndRemoveUntil(context, '/', (route) => false);
              },
            ),
          ],
        ),
      ),
      body: _buildBody(),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        selectedItemColor: AppColors.primary,
        onTap: _onNavTap,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.bar_chart), label: 'Data Summary'),
          BottomNavigationBarItem(icon: Icon(Icons.navigation), label: 'Navigation'),
        ],
      ),
    );
  }
}
